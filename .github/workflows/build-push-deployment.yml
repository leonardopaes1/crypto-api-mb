name: Docker Build, Push and Helm Deploy

on:
  push:
    branches:
      - staging
    tags:
      - 'v*.*.*'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: ${{ secrets.APPLICATION_NAME }}
  HELM_RELEASE: ${{ secrets.APPLICATION_NAME }}
  REPLICA_COUNT: ${{ secrets.REPLICA_COUNT }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
  SERVICE_PORT: ${{ secrets.SERVICE_PORT }}

jobs:
  build-push:
    name: Build and Push Dockerhub
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.22.0'

    - name: Get Go version
      id: go-version
      run: echo "GO_VERSION=$(go version | awk '{print $3}')" >> $GITHUB_ENV

    - name: Set image tag
      id: vars
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "RELEASE=prod" >> $GITHUB_ENV
          echo "PUSH_LATEST=true" >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/heads/staging ]]; then
          TAG=${GO_VERSION}-${GITHUB_SHA::7}
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "RELEASE=staging" >> $GITHUB_ENV
          echo "PUSH_LATEST=false" >> $GITHUB_ENV
        else
          echo "Branch não reconhecida para deploy."
          exit 1
        fi

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
             
    - name: Build Docker Image
      run: |
        docker build -t $REPO/$IMAGE_NAME:$IMAGE_TAG .
        if [[ "$PUSH_LATEST" == "true" ]]; then
          docker tag $REPO/$IMAGE_NAME:$IMAGE_TAG $REPO/$IMAGE_NAME:latest
        fi

    - name: Push Docker Image
      run: |
        docker push $REPO/$IMAGE_NAME:$IMAGE_TAG
        if [[ "$PUSH_LATEST" == "true" ]]; then
          docker push $REPO/$IMAGE_NAME:latest
        fi

  deployment:
    needs: build-push
    name: Deploy Helm Chart
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up GKE credentials
      run: |
        gcloud container clusters get-credentials sre-cluster --zone us-central1-c --project $PROJECT_ID
    
    - name: Get Go version
      id: go-version
      run: echo "GO_VERSION=$(go version | awk '{print $3}')" >> $GITHUB_ENV

    - name: Set release prod/staging
      id: vars
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "RELEASE=prod" >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/heads/staging ]]; then
          echo "RELEASE=staging" >> $GITHUB_ENV
        else
          echo "Branch não reconhecida para deploy."
          exit 1
        fi

    - name: Deploy with Helm (prod)
      if: ${{ env.RELEASE == 'prod' }}
      run: |
        helm upgrade --install $HELM_RELEASE ./helm/crypto-api \
          --namespace $RELEASE --create-namespace \
          --set environment=$RELEASE \
          --set replicaCount=$REPLICA_COUNT \
          --set image.repository=$DOCKER_USERNAME/$DOCKER_REPO \
          --set image.tag=$IMAGE_TAG \
          --set service.type=LoadBalancer \
          --set service.port=$SERVICE_PORT \
          --set nodeSelector.pool=$RELEASE-pool

    - name: Deploy with Helm (staging)
      if: ${{ env.RELEASE == 'staging' }}
      run: |
        helm upgrade --install $HELM_RELEASE ./helm/crypto-api \
          --namespace $RELEASE --create-namespace \
          --set environment=$RELEASE \
          --set replicaCount=$REPLICA_COUNT \
          --set image.repository=$DOCKER_USERNAME/$DOCKER_REPO \
          --set image.tag=$IMAGE_TAG \
          --set service.type=LoadBalancer \
          --set service.port=$SERVICE_PORT \
          --set nodeSelector.pool=$RELEASE-pool